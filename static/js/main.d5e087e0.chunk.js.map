{"version":3,"sources":["common/Container/styled.js","common/Container/index.js","common/Header/styled.js","common/Header/index.js","common/Section/styled.js","common/Section/index.js","features/author/Author.js","features/tasks/Form/styled.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","features/tasks/ButtonDownloadTask/index.js","theme.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js"],"names":["Main","styled","main","Container","children","H1","h1","Header","title","StyledSection","section","header","theme","padding","paddingTen","H2","h2","Div","div","Section","body","extraHeaderContent","Author","StyledForm","form","Input","input","color","primaryColor","Button","button","white","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","loading","hideDone","reducers","addTask","newTask","payload","push","toggleHideDone","state","removeTask","deleteTask","index","findIndex","id","splice","toggleTaskDone","toggleTask","done","setAllDone","fetchExampleTasks","fetchExampleTasksSuccess","fetchExampleTasksError","setTasks","actions","selectTasks","selectLoading","selectTasksState","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","current","focus","value","ref","required","placeholder","onChange","target","onClick","List","ul","Item","li","hidden","css","Content","span","toggleDone","remove","TaskList","useSelector","map","task","Buttons","length","autofocus","disabled","every","ButtonDownloadTask","TasksPage","App","to","path","Tasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddlware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5e087e0.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Main = styled.main`\r\n  max-width: 900px;\r\n  padding: 0px;\r\n  margin: 0 auto;\r\n`;","import { Main } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <Main>\r\n        {children}\r\n    </Main>\r\n);\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const H1 = styled.h1`\r\n  margin: 20px;\r\n  padding: 20px;\r\n  font-size: 30px;\r\n`;","import { H1 } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n    <H1>{title}</H1>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    padding: 20px;\r\n    margin: 10px 0;\r\n    background-color: white;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    font-size: 22px;\r\n    padding: ${({theme})=> theme.padding.paddingTen};\r\n    border-bottom: 1px solid rgb(233, 233, 233);\r\n\r\n  @media(max-width:700px) {\r\n        grid-template-columns: auto;\r\n        grid-gap: 10px;\r\n  }\r\n`;\r\n\r\nexport const H2 = styled.h2`\r\n  font-size: 20px;\r\n  margin: 0;\r\n`;\r\n\r\nexport const Div = styled.div`\r\n  padding: ${({theme})=> theme.padding.paddingTen};\r\n  display: grid;\r\n`;","import { StyledSection, Header, H2, Div } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <StyledSection>\r\n    <Header>\r\n      <H2>{title}</H2>\r\n      {extraHeaderContent}\r\n    </Header>\r\n    <Div>\r\n      {body}\r\n    </Div>\r\n  </StyledSection>\r\n);\r\n\r\nexport default Section;","import Container from \"../../common/Container\";\r\nimport Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\n\r\nfunction Author() {\r\n    return (\r\n        <Container>\r\n            <Header title=\"O autorze\" />\r\n            <Section\r\n                title=\"Wojtek Łatka\"\r\n                body={\r\n                    <>\r\n                        <p>Urodziłem się w małej wsi Łącko w 1982r. Obecnie mieszkam w małej wsi\r\n                            <strong>Jawornik</strong> pod Krakowem. Moją pasją jest karawaning. Całe wakacje spędzam na polu kempingowym. Niestety wakacje są krótkie z braku urlopu, dla tego postanowiłem nauczyć sie programowania, aby móc pracować zdalnie w naszej przyczepie :-)\r\n                        </p>\r\n                        <p>\r\n                            W przysłości chciał bym zmienić przyczepę na kampera i zwiedzić fajne miejsca w polsce i za granicą.\r\n                        </p>\r\n                    </>\r\n                } />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Author;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    margin: 10px;\r\n    grid-gap: 10px;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    flex-grow: 3;\r\n    padding-left: 10px;  \r\n    border: 1px solid ${({ theme }) => theme.color.primaryColor};\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    flex-grow: 1;\r\n    background-color: hsl(180, 100%, 19%);\r\n    color: ${({ theme }) => theme.color.white};\r\n    border-style: none;\r\n    height: 30px;\r\n    text-align: center;\r\n    font-size: 14px;\r\n    cursor: pointer;\r\n    transition: 1.0s;\r\n\r\n    &:hover {\r\n        transform: scale(1.1);\r\n        background-color: hsl(180, 100%, 29%);\r\n    }\r\n\r\n    &:active {\r\n        background: hsl(180, 100%, 34%);\r\n    }\r\n`;","const localStorageKey = 'tasks';\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    tasks: getTasksFromLocalStorage(),\r\n    loading: false,\r\n    hideDone: false,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload: newTask }) => {\r\n      tasks.push(newTask);\r\n    },\r\n    toggleHideDone: state => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    removeTask: ({ tasks }, { payload: deleteTask }) => {\r\n      const index = tasks.findIndex(({ id }) => id === deleteTask);\r\n      tasks.splice(index, 1)\r\n    },\r\n    toggleTaskDone: ({ tasks }, { payload: toggleTask }) => {\r\n      const index = tasks.findIndex(({ id }) => id === toggleTask);\r\n      tasks[index].done = !tasks[index].done\r\n    },\r\n    setAllDone: ({ tasks }) => {\r\n      for (const task of tasks) {\r\n        task.done = true;\r\n      }\r\n    },\r\n    fetchExampleTasks: (state) => {\r\n      state.loading = true;\r\n    },\r\n\r\n    fetchExampleTasksSuccess: (state, { payload: tasks }) => {\r\n      state.tasks = tasks;\r\n      state.loading = false;\r\n    },\r\n\r\n    fetchExampleTasksError: (state) => {\r\n      state.loading = false;\r\n    },\r\n\r\n    setTasks: (state, { payload: tasks }) => {\r\n      state.tasks = tasks;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  removeTask,\r\n  toggleTaskDone,\r\n  toggleHideDone,\r\n  setAllDone,\r\n  fetchExampleTasks,\r\n  fetchExampleTasksSuccess,\r\n  fetchExampleTasksError,\r\n  setTasks\r\n} = tasksSlice.actions;\r\n\r\nconst selectTasksState = (state) => state.tasks;\r\n\r\nexport const selectTasks = (state) => state.tasks;\r\nexport const selectLoading = (state) => selectTasksState(state).loading;\r\nexport default tasksSlice.reducer;","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\nimport { addTask } from \"../tasksSlice\";\r\n\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n    if (!trimmedNewTaskContent) {\r\n      return;\r\n    }\r\n\r\n    dispatch(addTask({\r\n      content: trimmedNewTaskContent,\r\n      done: false,\r\n      id: nanoid(),\r\n    }));\r\n\r\n    setNewTaskContent(\"\");\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  const focusInput = () => {\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input\r\n        value={newTaskContent}\r\n        ref={inputRef}\r\n        required\r\n        placeholder=\"Zadania na dziś!\"\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n      />\r\n      <Button onClick={focusInput}>Dodaj zadanie</Button>\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    padding: 10px;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    border-bottom: 1px solid rgb(233, 233, 233);\r\n    align-items: center;\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\nfont-size: 16px;\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: white;\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n    transition: background 0.3s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background: hsl(120, 100%, 24%);\r\n        &:hover {\r\n            background: hsl(120, 100%, 34%);\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background: hsl(348, 83%, 42%); \r\n        &:hover {\r\n            background: hsl(348, 83%, 58%);\r\n        }\r\n        &:active {\r\n            background: hsl(348, 83%, 62%);\r\n        }\r\n    `}\r\n`;","import { List, Item, Content, Button } from \"./styled\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectTasks, toggleTaskDone, removeTask } from \"../tasksSlice\";\r\n\r\nconst TaskList = () => {\r\n\r\n    const { tasks, hideDone } = useSelector(selectTasks);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✓\" : \"\"}\r\n                    </Button>\r\n\r\n                    <Content done={task.done}>\r\n                        - {task.content}\r\n                    </Content>\r\n\r\n                    <Button\r\n                        remove\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                    >\r\n                        🗑\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const Div = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background: transparent;\r\n    color: ${({ theme }) => theme.color.primaryColor};\r\n    border: none;\r\n    margin: 0 0 0 20px;\r\n    transition: color 0.3s;\r\n    font-size: 14px;\r\n\r\n    &:hover {\r\n    color: hsl(180, 100%, 35%);\r\n    }\r\n\r\n    &:disabled {\r\n    color: #ccc;\r\n    }\r\n\r\n    @media(max-width: 767px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    selectTasks,\r\n    toggleHideDone,\r\n    setAllDone,\r\n} from \"../tasksSlice\";\r\nimport { Div, Button } from \"./styled\";\r\n\r\nconst Buttons = () => {\r\n    const { tasks, hideDone } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <Div>\r\n            {tasks.length > 0 && (\r\n                <>\r\n                    <Button\r\n                        onClick={() => dispatch(toggleHideDone())}\r\n                    >\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} zakończone\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        autofocus\r\n                        disabled={tasks.every(({ done }) => done)}\r\n                    >\r\n                        Zakończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Div>\r\n    )\r\n};\r\n\r\nexport default Buttons;","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    fetchExampleTasks,\r\n    selectLoading\r\n} from \"../tasksSlice\";\r\nimport { Div, Button } from \"../Buttons/styled\";\r\n\r\nconst ButtonDownloadTask = () => {\r\n    const dispatch = useDispatch();\r\n    const loading = useSelector(selectLoading);\r\n    return (\r\n        <Div>\r\n            <Button disabled={loading} onClick={() => dispatch(fetchExampleTasks())}>\r\n                {loading ? \"Ładowanie...\" : \"Pobierz przykładowe zadania\"}\r\n            </Button>\r\n        </Div>\r\n    )\r\n};\r\n\r\nexport default ButtonDownloadTask;","export const theme = {\r\n    padding: {\r\n        paddingTen: \"10px\",\r\n    },\r\n\r\n    color: {\r\n        white: \"white\",\r\n        primaryColor: \"teal\",\r\n    },\r\n};","import Form from \"./Form\";\nimport Tasks from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport ButtonDownloadTask from \"./ButtonDownloadTask\"\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\nimport Container from \"../../common/Container\";\nimport { ThemeProvider } from \"styled-components\";\nimport { theme } from \"../../theme\";\n\nfunction TasksPage() {\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container>\n        <Header title=\"Lista Zadań\" />\n        <Section\n          title=\"Dodaj nowe zadanie\"\n          body={<Form />}\n          extraHeaderContent={<ButtonDownloadTask  />} />\n        <Section\n          title=\"Lista zadań\"\n          body={<Tasks />}\n          extraHeaderContent={<Buttons />} />\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default TasksPage;","import { HashRouter, Link, Switch, Route } from \"react-router-dom\";\r\nimport Author from \"./features/author/Author\";\r\nimport TasksPage from \"./features/tasks/Tasks\";\r\n\r\nexport const App = () => (\r\n  <HashRouter>\r\n    <nav>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/zadania\">\r\n            Zadania\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/autor\">\r\n            O autorze\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n      <Switch>\r\n        <Route path=\"/zadania\">\r\n          <TasksPage />\r\n        </Route>\r\n        <Route path=\"/autor\">\r\n          <Author />\r\n        </Route>\r\n      </Switch>\r\n    </nav>\r\n  </HashRouter>\r\n);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/todo-list-react/exampleTasks.json\");\r\n    if (!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n    return await response.json();\r\n};","import { takeEvery, takeLatest, call, put, delay, select } from \"redux-saga/effects\";\r\nimport { fetchExampleTasks, fetchExampleTasksError, fetchExampleTasksSuccess, selectTasks } from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\n\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(fetchExampleTasksSuccess(exampleTasks));\r\n    } catch (error) {\r\n        yield put(fetchExampleTasksError());\r\n        yield call(alert, \"Coś poszło nie tak!\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n\r\n    const { tasks } = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}","import { all } from 'redux-saga/effects';\r\nimport { tasksSaga } from './features/tasks/tasksSaga';\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n}","import { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddlware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddlware],\r\n});\r\n\r\nsagaMiddlware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { ThemeProvider } from 'styled-components';\nimport './index.css';\nimport { App } from \"./App\";\nimport reportWebVitals from './reportWebVitals';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}